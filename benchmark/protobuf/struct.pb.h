// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: struct.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_struct_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_struct_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021011 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_struct_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_struct_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_struct_2eproto;
namespace proto {
class BigStrings;
struct BigStringsDefaultTypeInternal;
extern BigStringsDefaultTypeInternal _BigStrings_default_instance_;
class BigVectorOfInts;
struct BigVectorOfIntsDefaultTypeInternal;
extern BigVectorOfIntsDefaultTypeInternal _BigVectorOfInts_default_instance_;
class GetBagInfoRsp;
struct GetBagInfoRspDefaultTypeInternal;
extern GetBagInfoRspDefaultTypeInternal _GetBagInfoRsp_default_instance_;
class Item;
struct ItemDefaultTypeInternal;
extern ItemDefaultTypeInternal _Item_default_instance_;
class VectorOfBigString;
struct VectorOfBigStringDefaultTypeInternal;
extern VectorOfBigStringDefaultTypeInternal _VectorOfBigString_default_instance_;
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> ::proto::BigStrings* Arena::CreateMaybeMessage<::proto::BigStrings>(Arena*);
template<> ::proto::BigVectorOfInts* Arena::CreateMaybeMessage<::proto::BigVectorOfInts>(Arena*);
template<> ::proto::GetBagInfoRsp* Arena::CreateMaybeMessage<::proto::GetBagInfoRsp>(Arena*);
template<> ::proto::Item* Arena::CreateMaybeMessage<::proto::Item>(Arena*);
template<> ::proto::VectorOfBigString* Arena::CreateMaybeMessage<::proto::VectorOfBigString>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace proto {

// ===================================================================

class BigVectorOfInts final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.BigVectorOfInts) */ {
 public:
  inline BigVectorOfInts() : BigVectorOfInts(nullptr) {}
  ~BigVectorOfInts() override;
  explicit PROTOBUF_CONSTEXPR BigVectorOfInts(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BigVectorOfInts(const BigVectorOfInts& from);
  BigVectorOfInts(BigVectorOfInts&& from) noexcept
    : BigVectorOfInts() {
    *this = ::std::move(from);
  }

  inline BigVectorOfInts& operator=(const BigVectorOfInts& from) {
    CopyFrom(from);
    return *this;
  }
  inline BigVectorOfInts& operator=(BigVectorOfInts&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BigVectorOfInts& default_instance() {
    return *internal_default_instance();
  }
  static inline const BigVectorOfInts* internal_default_instance() {
    return reinterpret_cast<const BigVectorOfInts*>(
               &_BigVectorOfInts_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BigVectorOfInts& a, BigVectorOfInts& b) {
    a.Swap(&b);
  }
  inline void Swap(BigVectorOfInts* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BigVectorOfInts* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BigVectorOfInts* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BigVectorOfInts>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BigVectorOfInts& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BigVectorOfInts& from) {
    BigVectorOfInts::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BigVectorOfInts* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.BigVectorOfInts";
  }
  protected:
  explicit BigVectorOfInts(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIntListFieldNumber = 1,
  };
  // repeated int32 int_list = 1;
  int int_list_size() const;
  private:
  int _internal_int_list_size() const;
  public:
  void clear_int_list();
  private:
  int32_t _internal_int_list(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_int_list() const;
  void _internal_add_int_list(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_int_list();
  public:
  int32_t int_list(int index) const;
  void set_int_list(int index, int32_t value);
  void add_int_list(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      int_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_int_list();

  // @@protoc_insertion_point(class_scope:proto.BigVectorOfInts)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > int_list_;
    mutable std::atomic<int> _int_list_cached_byte_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_struct_2eproto;
};
// -------------------------------------------------------------------

class BigStrings final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.BigStrings) */ {
 public:
  inline BigStrings() : BigStrings(nullptr) {}
  ~BigStrings() override;
  explicit PROTOBUF_CONSTEXPR BigStrings(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BigStrings(const BigStrings& from);
  BigStrings(BigStrings&& from) noexcept
    : BigStrings() {
    *this = ::std::move(from);
  }

  inline BigStrings& operator=(const BigStrings& from) {
    CopyFrom(from);
    return *this;
  }
  inline BigStrings& operator=(BigStrings&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BigStrings& default_instance() {
    return *internal_default_instance();
  }
  static inline const BigStrings* internal_default_instance() {
    return reinterpret_cast<const BigStrings*>(
               &_BigStrings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BigStrings& a, BigStrings& b) {
    a.Swap(&b);
  }
  inline void Swap(BigStrings* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BigStrings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BigStrings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BigStrings>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BigStrings& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BigStrings& from) {
    BigStrings::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BigStrings* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.BigStrings";
  }
  protected:
  explicit BigStrings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStrListFieldNumber = 1,
  };
  // repeated bytes str_list = 1;
  int str_list_size() const;
  private:
  int _internal_str_list_size() const;
  public:
  void clear_str_list();
  const std::string& str_list(int index) const;
  std::string* mutable_str_list(int index);
  void set_str_list(int index, const std::string& value);
  void set_str_list(int index, std::string&& value);
  void set_str_list(int index, const char* value);
  void set_str_list(int index, const void* value, size_t size);
  std::string* add_str_list();
  void add_str_list(const std::string& value);
  void add_str_list(std::string&& value);
  void add_str_list(const char* value);
  void add_str_list(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& str_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_str_list();
  private:
  const std::string& _internal_str_list(int index) const;
  std::string* _internal_add_str_list();
  public:

  // @@protoc_insertion_point(class_scope:proto.BigStrings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> str_list_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_struct_2eproto;
};
// -------------------------------------------------------------------

class VectorOfBigString final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.VectorOfBigString) */ {
 public:
  inline VectorOfBigString() : VectorOfBigString(nullptr) {}
  ~VectorOfBigString() override;
  explicit PROTOBUF_CONSTEXPR VectorOfBigString(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VectorOfBigString(const VectorOfBigString& from);
  VectorOfBigString(VectorOfBigString&& from) noexcept
    : VectorOfBigString() {
    *this = ::std::move(from);
  }

  inline VectorOfBigString& operator=(const VectorOfBigString& from) {
    CopyFrom(from);
    return *this;
  }
  inline VectorOfBigString& operator=(VectorOfBigString&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VectorOfBigString& default_instance() {
    return *internal_default_instance();
  }
  static inline const VectorOfBigString* internal_default_instance() {
    return reinterpret_cast<const VectorOfBigString*>(
               &_VectorOfBigString_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(VectorOfBigString& a, VectorOfBigString& b) {
    a.Swap(&b);
  }
  inline void Swap(VectorOfBigString* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VectorOfBigString* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VectorOfBigString* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VectorOfBigString>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VectorOfBigString& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VectorOfBigString& from) {
    VectorOfBigString::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VectorOfBigString* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.VectorOfBigString";
  }
  protected:
  explicit VectorOfBigString(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStrListFieldNumber = 1,
  };
  // repeated string str_list = 1;
  int str_list_size() const;
  private:
  int _internal_str_list_size() const;
  public:
  void clear_str_list();
  const std::string& str_list(int index) const;
  std::string* mutable_str_list(int index);
  void set_str_list(int index, const std::string& value);
  void set_str_list(int index, std::string&& value);
  void set_str_list(int index, const char* value);
  void set_str_list(int index, const char* value, size_t size);
  std::string* add_str_list();
  void add_str_list(const std::string& value);
  void add_str_list(std::string&& value);
  void add_str_list(const char* value);
  void add_str_list(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& str_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_str_list();
  private:
  const std::string& _internal_str_list(int index) const;
  std::string* _internal_add_str_list();
  public:

  // @@protoc_insertion_point(class_scope:proto.VectorOfBigString)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> str_list_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_struct_2eproto;
};
// -------------------------------------------------------------------

class Item final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.Item) */ {
 public:
  inline Item() : Item(nullptr) {}
  ~Item() override;
  explicit PROTOBUF_CONSTEXPR Item(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Item(const Item& from);
  Item(Item&& from) noexcept
    : Item() {
    *this = ::std::move(from);
  }

  inline Item& operator=(const Item& from) {
    CopyFrom(from);
    return *this;
  }
  inline Item& operator=(Item&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Item& default_instance() {
    return *internal_default_instance();
  }
  static inline const Item* internal_default_instance() {
    return reinterpret_cast<const Item*>(
               &_Item_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Item& a, Item& b) {
    a.Swap(&b);
  }
  inline void Swap(Item* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Item* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Item* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Item>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Item& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Item& from) {
    Item::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Item* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.Item";
  }
  protected:
  explicit Item(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUuidFieldNumber = 1,
    kCntFieldNumber = 2,
    kExtFieldNumber = 3,
  };
  // int32 uuid = 1;
  void clear_uuid();
  int32_t uuid() const;
  void set_uuid(int32_t value);
  private:
  int32_t _internal_uuid() const;
  void _internal_set_uuid(int32_t value);
  public:

  // int32 cnt = 2;
  void clear_cnt();
  int32_t cnt() const;
  void set_cnt(int32_t value);
  private:
  int32_t _internal_cnt() const;
  void _internal_set_cnt(int32_t value);
  public:

  // int32 ext = 3;
  void clear_ext();
  int32_t ext() const;
  void set_ext(int32_t value);
  private:
  int32_t _internal_ext() const;
  void _internal_set_ext(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:proto.Item)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t uuid_;
    int32_t cnt_;
    int32_t ext_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_struct_2eproto;
};
// -------------------------------------------------------------------

class GetBagInfoRsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.GetBagInfoRsp) */ {
 public:
  inline GetBagInfoRsp() : GetBagInfoRsp(nullptr) {}
  ~GetBagInfoRsp() override;
  explicit PROTOBUF_CONSTEXPR GetBagInfoRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetBagInfoRsp(const GetBagInfoRsp& from);
  GetBagInfoRsp(GetBagInfoRsp&& from) noexcept
    : GetBagInfoRsp() {
    *this = ::std::move(from);
  }

  inline GetBagInfoRsp& operator=(const GetBagInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBagInfoRsp& operator=(GetBagInfoRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetBagInfoRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetBagInfoRsp* internal_default_instance() {
    return reinterpret_cast<const GetBagInfoRsp*>(
               &_GetBagInfoRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GetBagInfoRsp& a, GetBagInfoRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBagInfoRsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetBagInfoRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetBagInfoRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetBagInfoRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetBagInfoRsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetBagInfoRsp& from) {
    GetBagInfoRsp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBagInfoRsp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.GetBagInfoRsp";
  }
  protected:
  explicit GetBagInfoRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemListFieldNumber = 3,
    kMsgFieldNumber = 2,
    kRetcodeFieldNumber = 1,
  };
  // repeated .proto.Item item_list = 3;
  int item_list_size() const;
  private:
  int _internal_item_list_size() const;
  public:
  void clear_item_list();
  ::proto::Item* mutable_item_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Item >*
      mutable_item_list();
  private:
  const ::proto::Item& _internal_item_list(int index) const;
  ::proto::Item* _internal_add_item_list();
  public:
  const ::proto::Item& item_list(int index) const;
  ::proto::Item* add_item_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Item >&
      item_list() const;

  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_NODISCARD std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 retcode = 1;
  void clear_retcode();
  int32_t retcode() const;
  void set_retcode(int32_t value);
  private:
  int32_t _internal_retcode() const;
  void _internal_set_retcode(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:proto.GetBagInfoRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Item > item_list_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
    int32_t retcode_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_struct_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BigVectorOfInts

// repeated int32 int_list = 1;
inline int BigVectorOfInts::_internal_int_list_size() const {
  return _impl_.int_list_.size();
}
inline int BigVectorOfInts::int_list_size() const {
  return _internal_int_list_size();
}
inline void BigVectorOfInts::clear_int_list() {
  _impl_.int_list_.Clear();
}
inline int32_t BigVectorOfInts::_internal_int_list(int index) const {
  return _impl_.int_list_.Get(index);
}
inline int32_t BigVectorOfInts::int_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.BigVectorOfInts.int_list)
  return _internal_int_list(index);
}
inline void BigVectorOfInts::set_int_list(int index, int32_t value) {
  _impl_.int_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.BigVectorOfInts.int_list)
}
inline void BigVectorOfInts::_internal_add_int_list(int32_t value) {
  _impl_.int_list_.Add(value);
}
inline void BigVectorOfInts::add_int_list(int32_t value) {
  _internal_add_int_list(value);
  // @@protoc_insertion_point(field_add:proto.BigVectorOfInts.int_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
BigVectorOfInts::_internal_int_list() const {
  return _impl_.int_list_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
BigVectorOfInts::int_list() const {
  // @@protoc_insertion_point(field_list:proto.BigVectorOfInts.int_list)
  return _internal_int_list();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
BigVectorOfInts::_internal_mutable_int_list() {
  return &_impl_.int_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
BigVectorOfInts::mutable_int_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.BigVectorOfInts.int_list)
  return _internal_mutable_int_list();
}

// -------------------------------------------------------------------

// BigStrings

// repeated bytes str_list = 1;
inline int BigStrings::_internal_str_list_size() const {
  return _impl_.str_list_.size();
}
inline int BigStrings::str_list_size() const {
  return _internal_str_list_size();
}
inline void BigStrings::clear_str_list() {
  _impl_.str_list_.Clear();
}
inline std::string* BigStrings::add_str_list() {
  std::string* _s = _internal_add_str_list();
  // @@protoc_insertion_point(field_add_mutable:proto.BigStrings.str_list)
  return _s;
}
inline const std::string& BigStrings::_internal_str_list(int index) const {
  return _impl_.str_list_.Get(index);
}
inline const std::string& BigStrings::str_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.BigStrings.str_list)
  return _internal_str_list(index);
}
inline std::string* BigStrings::mutable_str_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.BigStrings.str_list)
  return _impl_.str_list_.Mutable(index);
}
inline void BigStrings::set_str_list(int index, const std::string& value) {
  _impl_.str_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:proto.BigStrings.str_list)
}
inline void BigStrings::set_str_list(int index, std::string&& value) {
  _impl_.str_list_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:proto.BigStrings.str_list)
}
inline void BigStrings::set_str_list(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.str_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.BigStrings.str_list)
}
inline void BigStrings::set_str_list(int index, const void* value, size_t size) {
  _impl_.str_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.BigStrings.str_list)
}
inline std::string* BigStrings::_internal_add_str_list() {
  return _impl_.str_list_.Add();
}
inline void BigStrings::add_str_list(const std::string& value) {
  _impl_.str_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proto.BigStrings.str_list)
}
inline void BigStrings::add_str_list(std::string&& value) {
  _impl_.str_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:proto.BigStrings.str_list)
}
inline void BigStrings::add_str_list(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.str_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proto.BigStrings.str_list)
}
inline void BigStrings::add_str_list(const void* value, size_t size) {
  _impl_.str_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proto.BigStrings.str_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
BigStrings::str_list() const {
  // @@protoc_insertion_point(field_list:proto.BigStrings.str_list)
  return _impl_.str_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
BigStrings::mutable_str_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.BigStrings.str_list)
  return &_impl_.str_list_;
}

// -------------------------------------------------------------------

// VectorOfBigString

// repeated string str_list = 1;
inline int VectorOfBigString::_internal_str_list_size() const {
  return _impl_.str_list_.size();
}
inline int VectorOfBigString::str_list_size() const {
  return _internal_str_list_size();
}
inline void VectorOfBigString::clear_str_list() {
  _impl_.str_list_.Clear();
}
inline std::string* VectorOfBigString::add_str_list() {
  std::string* _s = _internal_add_str_list();
  // @@protoc_insertion_point(field_add_mutable:proto.VectorOfBigString.str_list)
  return _s;
}
inline const std::string& VectorOfBigString::_internal_str_list(int index) const {
  return _impl_.str_list_.Get(index);
}
inline const std::string& VectorOfBigString::str_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.VectorOfBigString.str_list)
  return _internal_str_list(index);
}
inline std::string* VectorOfBigString::mutable_str_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.VectorOfBigString.str_list)
  return _impl_.str_list_.Mutable(index);
}
inline void VectorOfBigString::set_str_list(int index, const std::string& value) {
  _impl_.str_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:proto.VectorOfBigString.str_list)
}
inline void VectorOfBigString::set_str_list(int index, std::string&& value) {
  _impl_.str_list_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:proto.VectorOfBigString.str_list)
}
inline void VectorOfBigString::set_str_list(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.str_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.VectorOfBigString.str_list)
}
inline void VectorOfBigString::set_str_list(int index, const char* value, size_t size) {
  _impl_.str_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.VectorOfBigString.str_list)
}
inline std::string* VectorOfBigString::_internal_add_str_list() {
  return _impl_.str_list_.Add();
}
inline void VectorOfBigString::add_str_list(const std::string& value) {
  _impl_.str_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proto.VectorOfBigString.str_list)
}
inline void VectorOfBigString::add_str_list(std::string&& value) {
  _impl_.str_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:proto.VectorOfBigString.str_list)
}
inline void VectorOfBigString::add_str_list(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.str_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proto.VectorOfBigString.str_list)
}
inline void VectorOfBigString::add_str_list(const char* value, size_t size) {
  _impl_.str_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proto.VectorOfBigString.str_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
VectorOfBigString::str_list() const {
  // @@protoc_insertion_point(field_list:proto.VectorOfBigString.str_list)
  return _impl_.str_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
VectorOfBigString::mutable_str_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.VectorOfBigString.str_list)
  return &_impl_.str_list_;
}

// -------------------------------------------------------------------

// Item

// int32 uuid = 1;
inline void Item::clear_uuid() {
  _impl_.uuid_ = 0;
}
inline int32_t Item::_internal_uuid() const {
  return _impl_.uuid_;
}
inline int32_t Item::uuid() const {
  // @@protoc_insertion_point(field_get:proto.Item.uuid)
  return _internal_uuid();
}
inline void Item::_internal_set_uuid(int32_t value) {
  
  _impl_.uuid_ = value;
}
inline void Item::set_uuid(int32_t value) {
  _internal_set_uuid(value);
  // @@protoc_insertion_point(field_set:proto.Item.uuid)
}

// int32 cnt = 2;
inline void Item::clear_cnt() {
  _impl_.cnt_ = 0;
}
inline int32_t Item::_internal_cnt() const {
  return _impl_.cnt_;
}
inline int32_t Item::cnt() const {
  // @@protoc_insertion_point(field_get:proto.Item.cnt)
  return _internal_cnt();
}
inline void Item::_internal_set_cnt(int32_t value) {
  
  _impl_.cnt_ = value;
}
inline void Item::set_cnt(int32_t value) {
  _internal_set_cnt(value);
  // @@protoc_insertion_point(field_set:proto.Item.cnt)
}

// int32 ext = 3;
inline void Item::clear_ext() {
  _impl_.ext_ = 0;
}
inline int32_t Item::_internal_ext() const {
  return _impl_.ext_;
}
inline int32_t Item::ext() const {
  // @@protoc_insertion_point(field_get:proto.Item.ext)
  return _internal_ext();
}
inline void Item::_internal_set_ext(int32_t value) {
  
  _impl_.ext_ = value;
}
inline void Item::set_ext(int32_t value) {
  _internal_set_ext(value);
  // @@protoc_insertion_point(field_set:proto.Item.ext)
}

// -------------------------------------------------------------------

// GetBagInfoRsp

// int32 retcode = 1;
inline void GetBagInfoRsp::clear_retcode() {
  _impl_.retcode_ = 0;
}
inline int32_t GetBagInfoRsp::_internal_retcode() const {
  return _impl_.retcode_;
}
inline int32_t GetBagInfoRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.GetBagInfoRsp.retcode)
  return _internal_retcode();
}
inline void GetBagInfoRsp::_internal_set_retcode(int32_t value) {
  
  _impl_.retcode_ = value;
}
inline void GetBagInfoRsp::set_retcode(int32_t value) {
  _internal_set_retcode(value);
  // @@protoc_insertion_point(field_set:proto.GetBagInfoRsp.retcode)
}

// string msg = 2;
inline void GetBagInfoRsp::clear_msg() {
  _impl_.msg_.ClearToEmpty();
}
inline const std::string& GetBagInfoRsp::msg() const {
  // @@protoc_insertion_point(field_get:proto.GetBagInfoRsp.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetBagInfoRsp::set_msg(ArgT0&& arg0, ArgT... args) {
 
 _impl_.msg_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.GetBagInfoRsp.msg)
}
inline std::string* GetBagInfoRsp::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:proto.GetBagInfoRsp.msg)
  return _s;
}
inline const std::string& GetBagInfoRsp::_internal_msg() const {
  return _impl_.msg_.Get();
}
inline void GetBagInfoRsp::_internal_set_msg(const std::string& value) {
  
  _impl_.msg_.Set(value, GetArenaForAllocation());
}
inline std::string* GetBagInfoRsp::_internal_mutable_msg() {
  
  return _impl_.msg_.Mutable(GetArenaForAllocation());
}
inline std::string* GetBagInfoRsp::release_msg() {
  // @@protoc_insertion_point(field_release:proto.GetBagInfoRsp.msg)
  return _impl_.msg_.Release();
}
inline void GetBagInfoRsp::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  _impl_.msg_.SetAllocated(msg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.msg_.IsDefault()) {
    _impl_.msg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.GetBagInfoRsp.msg)
}

// repeated .proto.Item item_list = 3;
inline int GetBagInfoRsp::_internal_item_list_size() const {
  return _impl_.item_list_.size();
}
inline int GetBagInfoRsp::item_list_size() const {
  return _internal_item_list_size();
}
inline void GetBagInfoRsp::clear_item_list() {
  _impl_.item_list_.Clear();
}
inline ::proto::Item* GetBagInfoRsp::mutable_item_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GetBagInfoRsp.item_list)
  return _impl_.item_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Item >*
GetBagInfoRsp::mutable_item_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GetBagInfoRsp.item_list)
  return &_impl_.item_list_;
}
inline const ::proto::Item& GetBagInfoRsp::_internal_item_list(int index) const {
  return _impl_.item_list_.Get(index);
}
inline const ::proto::Item& GetBagInfoRsp::item_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GetBagInfoRsp.item_list)
  return _internal_item_list(index);
}
inline ::proto::Item* GetBagInfoRsp::_internal_add_item_list() {
  return _impl_.item_list_.Add();
}
inline ::proto::Item* GetBagInfoRsp::add_item_list() {
  ::proto::Item* _add = _internal_add_item_list();
  // @@protoc_insertion_point(field_add:proto.GetBagInfoRsp.item_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Item >&
GetBagInfoRsp::item_list() const {
  // @@protoc_insertion_point(field_list:proto.GetBagInfoRsp.item_list)
  return _impl_.item_list_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_struct_2eproto
