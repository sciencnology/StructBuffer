// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: struct.proto

#include "struct.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace proto {
PROTOBUF_CONSTEXPR BigVectorOfInts::BigVectorOfInts(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.int_list_)*/{}
  , /*decltype(_impl_._int_list_cached_byte_size_)*/{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BigVectorOfIntsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BigVectorOfIntsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BigVectorOfIntsDefaultTypeInternal() {}
  union {
    BigVectorOfInts _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BigVectorOfIntsDefaultTypeInternal _BigVectorOfInts_default_instance_;
PROTOBUF_CONSTEXPR BigStrings::BigStrings(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.str_list_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BigStringsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BigStringsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BigStringsDefaultTypeInternal() {}
  union {
    BigStrings _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BigStringsDefaultTypeInternal _BigStrings_default_instance_;
PROTOBUF_CONSTEXPR VectorOfBigString::VectorOfBigString(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.str_list_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VectorOfBigStringDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VectorOfBigStringDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VectorOfBigStringDefaultTypeInternal() {}
  union {
    VectorOfBigString _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VectorOfBigStringDefaultTypeInternal _VectorOfBigString_default_instance_;
PROTOBUF_CONSTEXPR Item::Item(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.uuid_)*/0
  , /*decltype(_impl_.cnt_)*/0
  , /*decltype(_impl_.ext_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ItemDefaultTypeInternal() {}
  union {
    Item _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ItemDefaultTypeInternal _Item_default_instance_;
PROTOBUF_CONSTEXPR GetBagInfoRsp::GetBagInfoRsp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.item_list_)*/{}
  , /*decltype(_impl_.msg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.retcode_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetBagInfoRspDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetBagInfoRspDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetBagInfoRspDefaultTypeInternal() {}
  union {
    GetBagInfoRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetBagInfoRspDefaultTypeInternal _GetBagInfoRsp_default_instance_;
}  // namespace proto
static ::_pb::Metadata file_level_metadata_struct_2eproto[5];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_struct_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_struct_2eproto = nullptr;

const uint32_t TableStruct_struct_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::BigVectorOfInts, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::BigVectorOfInts, _impl_.int_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::BigStrings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::BigStrings, _impl_.str_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::VectorOfBigString, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::VectorOfBigString, _impl_.str_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::Item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::Item, _impl_.uuid_),
  PROTOBUF_FIELD_OFFSET(::proto::Item, _impl_.cnt_),
  PROTOBUF_FIELD_OFFSET(::proto::Item, _impl_.ext_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::GetBagInfoRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::GetBagInfoRsp, _impl_.retcode_),
  PROTOBUF_FIELD_OFFSET(::proto::GetBagInfoRsp, _impl_.msg_),
  PROTOBUF_FIELD_OFFSET(::proto::GetBagInfoRsp, _impl_.item_list_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::proto::BigVectorOfInts)},
  { 7, -1, -1, sizeof(::proto::BigStrings)},
  { 14, -1, -1, sizeof(::proto::VectorOfBigString)},
  { 21, -1, -1, sizeof(::proto::Item)},
  { 30, -1, -1, sizeof(::proto::GetBagInfoRsp)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::proto::_BigVectorOfInts_default_instance_._instance,
  &::proto::_BigStrings_default_instance_._instance,
  &::proto::_VectorOfBigString_default_instance_._instance,
  &::proto::_Item_default_instance_._instance,
  &::proto::_GetBagInfoRsp_default_instance_._instance,
};

const char descriptor_table_protodef_struct_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014struct.proto\022\005proto\"#\n\017BigVectorOfInts"
  "\022\020\n\010int_list\030\001 \003(\005\"\036\n\nBigStrings\022\020\n\010str_"
  "list\030\001 \003(\014\"%\n\021VectorOfBigString\022\020\n\010str_l"
  "ist\030\001 \003(\t\".\n\004Item\022\014\n\004uuid\030\001 \001(\005\022\013\n\003cnt\030\002"
  " \001(\005\022\013\n\003ext\030\003 \001(\005\"M\n\rGetBagInfoRsp\022\017\n\007re"
  "tcode\030\001 \001(\005\022\013\n\003msg\030\002 \001(\t\022\036\n\titem_list\030\003 "
  "\003(\0132\013.proto.Itemb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_struct_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_struct_2eproto = {
    false, false, 264, descriptor_table_protodef_struct_2eproto,
    "struct.proto",
    &descriptor_table_struct_2eproto_once, nullptr, 0, 5,
    schemas, file_default_instances, TableStruct_struct_2eproto::offsets,
    file_level_metadata_struct_2eproto, file_level_enum_descriptors_struct_2eproto,
    file_level_service_descriptors_struct_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_struct_2eproto_getter() {
  return &descriptor_table_struct_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_struct_2eproto(&descriptor_table_struct_2eproto);
namespace proto {

// ===================================================================

class BigVectorOfInts::_Internal {
 public:
};

BigVectorOfInts::BigVectorOfInts(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.BigVectorOfInts)
}
BigVectorOfInts::BigVectorOfInts(const BigVectorOfInts& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BigVectorOfInts* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.int_list_){from._impl_.int_list_}
    , /*decltype(_impl_._int_list_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.BigVectorOfInts)
}

inline void BigVectorOfInts::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.int_list_){arena}
    , /*decltype(_impl_._int_list_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BigVectorOfInts::~BigVectorOfInts() {
  // @@protoc_insertion_point(destructor:proto.BigVectorOfInts)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BigVectorOfInts::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.int_list_.~RepeatedField();
}

void BigVectorOfInts::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BigVectorOfInts::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.BigVectorOfInts)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.int_list_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BigVectorOfInts::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 int_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_int_list(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_int_list(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BigVectorOfInts::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.BigVectorOfInts)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 int_list = 1;
  {
    int byte_size = _impl_._int_list_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_int_list(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.BigVectorOfInts)
  return target;
}

size_t BigVectorOfInts::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.BigVectorOfInts)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 int_list = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.int_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._int_list_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BigVectorOfInts::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BigVectorOfInts::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BigVectorOfInts::GetClassData() const { return &_class_data_; }


void BigVectorOfInts::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BigVectorOfInts*>(&to_msg);
  auto& from = static_cast<const BigVectorOfInts&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.BigVectorOfInts)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.int_list_.MergeFrom(from._impl_.int_list_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BigVectorOfInts::CopyFrom(const BigVectorOfInts& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.BigVectorOfInts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BigVectorOfInts::IsInitialized() const {
  return true;
}

void BigVectorOfInts::InternalSwap(BigVectorOfInts* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.int_list_.InternalSwap(&other->_impl_.int_list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BigVectorOfInts::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_struct_2eproto_getter, &descriptor_table_struct_2eproto_once,
      file_level_metadata_struct_2eproto[0]);
}

// ===================================================================

class BigStrings::_Internal {
 public:
};

BigStrings::BigStrings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.BigStrings)
}
BigStrings::BigStrings(const BigStrings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BigStrings* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.str_list_){from._impl_.str_list_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.BigStrings)
}

inline void BigStrings::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.str_list_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BigStrings::~BigStrings() {
  // @@protoc_insertion_point(destructor:proto.BigStrings)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BigStrings::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.str_list_.~RepeatedPtrField();
}

void BigStrings::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BigStrings::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.BigStrings)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.str_list_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BigStrings::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated bytes str_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_str_list();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BigStrings::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.BigStrings)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes str_list = 1;
  for (int i = 0, n = this->_internal_str_list_size(); i < n; i++) {
    const auto& s = this->_internal_str_list(i);
    target = stream->WriteBytes(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.BigStrings)
  return target;
}

size_t BigStrings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.BigStrings)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes str_list = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.str_list_.size());
  for (int i = 0, n = _impl_.str_list_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      _impl_.str_list_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BigStrings::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BigStrings::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BigStrings::GetClassData() const { return &_class_data_; }


void BigStrings::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BigStrings*>(&to_msg);
  auto& from = static_cast<const BigStrings&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.BigStrings)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.str_list_.MergeFrom(from._impl_.str_list_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BigStrings::CopyFrom(const BigStrings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.BigStrings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BigStrings::IsInitialized() const {
  return true;
}

void BigStrings::InternalSwap(BigStrings* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.str_list_.InternalSwap(&other->_impl_.str_list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BigStrings::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_struct_2eproto_getter, &descriptor_table_struct_2eproto_once,
      file_level_metadata_struct_2eproto[1]);
}

// ===================================================================

class VectorOfBigString::_Internal {
 public:
};

VectorOfBigString::VectorOfBigString(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.VectorOfBigString)
}
VectorOfBigString::VectorOfBigString(const VectorOfBigString& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VectorOfBigString* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.str_list_){from._impl_.str_list_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.VectorOfBigString)
}

inline void VectorOfBigString::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.str_list_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

VectorOfBigString::~VectorOfBigString() {
  // @@protoc_insertion_point(destructor:proto.VectorOfBigString)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VectorOfBigString::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.str_list_.~RepeatedPtrField();
}

void VectorOfBigString::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VectorOfBigString::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.VectorOfBigString)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.str_list_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VectorOfBigString::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string str_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_str_list();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "proto.VectorOfBigString.str_list"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VectorOfBigString::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.VectorOfBigString)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string str_list = 1;
  for (int i = 0, n = this->_internal_str_list_size(); i < n; i++) {
    const auto& s = this->_internal_str_list(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.VectorOfBigString.str_list");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.VectorOfBigString)
  return target;
}

size_t VectorOfBigString::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.VectorOfBigString)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string str_list = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.str_list_.size());
  for (int i = 0, n = _impl_.str_list_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.str_list_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VectorOfBigString::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VectorOfBigString::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VectorOfBigString::GetClassData() const { return &_class_data_; }


void VectorOfBigString::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VectorOfBigString*>(&to_msg);
  auto& from = static_cast<const VectorOfBigString&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.VectorOfBigString)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.str_list_.MergeFrom(from._impl_.str_list_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VectorOfBigString::CopyFrom(const VectorOfBigString& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.VectorOfBigString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VectorOfBigString::IsInitialized() const {
  return true;
}

void VectorOfBigString::InternalSwap(VectorOfBigString* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.str_list_.InternalSwap(&other->_impl_.str_list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VectorOfBigString::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_struct_2eproto_getter, &descriptor_table_struct_2eproto_once,
      file_level_metadata_struct_2eproto[2]);
}

// ===================================================================

class Item::_Internal {
 public:
};

Item::Item(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.Item)
}
Item::Item(const Item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Item* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.uuid_){}
    , decltype(_impl_.cnt_){}
    , decltype(_impl_.ext_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.uuid_, &from._impl_.uuid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ext_) -
    reinterpret_cast<char*>(&_impl_.uuid_)) + sizeof(_impl_.ext_));
  // @@protoc_insertion_point(copy_constructor:proto.Item)
}

inline void Item::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.uuid_){0}
    , decltype(_impl_.cnt_){0}
    , decltype(_impl_.ext_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Item::~Item() {
  // @@protoc_insertion_point(destructor:proto.Item)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Item::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Item::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Item::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Item)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.uuid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.ext_) -
      reinterpret_cast<char*>(&_impl_.uuid_)) + sizeof(_impl_.ext_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Item::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 uuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.uuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 cnt = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.cnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ext = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.ext_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Item::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Item)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 uuid = 1;
  if (this->_internal_uuid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_uuid(), target);
  }

  // int32 cnt = 2;
  if (this->_internal_cnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_cnt(), target);
  }

  // int32 ext = 3;
  if (this->_internal_ext() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_ext(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Item)
  return target;
}

size_t Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Item)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 uuid = 1;
  if (this->_internal_uuid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_uuid());
  }

  // int32 cnt = 2;
  if (this->_internal_cnt() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_cnt());
  }

  // int32 ext = 3;
  if (this->_internal_ext() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ext());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Item::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Item::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Item::GetClassData() const { return &_class_data_; }


void Item::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Item*>(&to_msg);
  auto& from = static_cast<const Item&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.Item)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_uuid() != 0) {
    _this->_internal_set_uuid(from._internal_uuid());
  }
  if (from._internal_cnt() != 0) {
    _this->_internal_set_cnt(from._internal_cnt());
  }
  if (from._internal_ext() != 0) {
    _this->_internal_set_ext(from._internal_ext());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Item::CopyFrom(const Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item::IsInitialized() const {
  return true;
}

void Item::InternalSwap(Item* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Item, _impl_.ext_)
      + sizeof(Item::_impl_.ext_)
      - PROTOBUF_FIELD_OFFSET(Item, _impl_.uuid_)>(
          reinterpret_cast<char*>(&_impl_.uuid_),
          reinterpret_cast<char*>(&other->_impl_.uuid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Item::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_struct_2eproto_getter, &descriptor_table_struct_2eproto_once,
      file_level_metadata_struct_2eproto[3]);
}

// ===================================================================

class GetBagInfoRsp::_Internal {
 public:
};

GetBagInfoRsp::GetBagInfoRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.GetBagInfoRsp)
}
GetBagInfoRsp::GetBagInfoRsp(const GetBagInfoRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetBagInfoRsp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.item_list_){from._impl_.item_list_}
    , decltype(_impl_.msg_){}
    , decltype(_impl_.retcode_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msg().empty()) {
    _this->_impl_.msg_.Set(from._internal_msg(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.retcode_ = from._impl_.retcode_;
  // @@protoc_insertion_point(copy_constructor:proto.GetBagInfoRsp)
}

inline void GetBagInfoRsp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.item_list_){arena}
    , decltype(_impl_.msg_){}
    , decltype(_impl_.retcode_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetBagInfoRsp::~GetBagInfoRsp() {
  // @@protoc_insertion_point(destructor:proto.GetBagInfoRsp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetBagInfoRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.item_list_.~RepeatedPtrField();
  _impl_.msg_.Destroy();
}

void GetBagInfoRsp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetBagInfoRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GetBagInfoRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.item_list_.Clear();
  _impl_.msg_.ClearToEmpty();
  _impl_.retcode_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetBagInfoRsp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 retcode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.retcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_msg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.GetBagInfoRsp.msg"));
        } else
          goto handle_unusual;
        continue;
      // repeated .proto.Item item_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_item_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetBagInfoRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.GetBagInfoRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->_internal_retcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_retcode(), target);
  }

  // string msg = 2;
  if (!this->_internal_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.GetBagInfoRsp.msg");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_msg(), target);
  }

  // repeated .proto.Item item_list = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_item_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_item_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GetBagInfoRsp)
  return target;
}

size_t GetBagInfoRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GetBagInfoRsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.Item item_list = 3;
  total_size += 1UL * this->_internal_item_list_size();
  for (const auto& msg : this->_impl_.item_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string msg = 2;
  if (!this->_internal_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // int32 retcode = 1;
  if (this->_internal_retcode() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_retcode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetBagInfoRsp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetBagInfoRsp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetBagInfoRsp::GetClassData() const { return &_class_data_; }


void GetBagInfoRsp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetBagInfoRsp*>(&to_msg);
  auto& from = static_cast<const GetBagInfoRsp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.GetBagInfoRsp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.item_list_.MergeFrom(from._impl_.item_list_);
  if (!from._internal_msg().empty()) {
    _this->_internal_set_msg(from._internal_msg());
  }
  if (from._internal_retcode() != 0) {
    _this->_internal_set_retcode(from._internal_retcode());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetBagInfoRsp::CopyFrom(const GetBagInfoRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GetBagInfoRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBagInfoRsp::IsInitialized() const {
  return true;
}

void GetBagInfoRsp::InternalSwap(GetBagInfoRsp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.item_list_.InternalSwap(&other->_impl_.item_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.msg_, lhs_arena,
      &other->_impl_.msg_, rhs_arena
  );
  swap(_impl_.retcode_, other->_impl_.retcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetBagInfoRsp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_struct_2eproto_getter, &descriptor_table_struct_2eproto_once,
      file_level_metadata_struct_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::proto::BigVectorOfInts*
Arena::CreateMaybeMessage< ::proto::BigVectorOfInts >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::BigVectorOfInts >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::BigStrings*
Arena::CreateMaybeMessage< ::proto::BigStrings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::BigStrings >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::VectorOfBigString*
Arena::CreateMaybeMessage< ::proto::VectorOfBigString >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::VectorOfBigString >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::Item*
Arena::CreateMaybeMessage< ::proto::Item >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::Item >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::GetBagInfoRsp*
Arena::CreateMaybeMessage< ::proto::GetBagInfoRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::GetBagInfoRsp >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
