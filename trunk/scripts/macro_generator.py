
def generate_get_func_body(n):
    if 1 == n:
        return '''#define GET_FUNC_BODY_1(_1) \\
    if constexpr (0 == N) { return (_1); } '''
    param_vec = [f'_{i}' for i in range(1, n + 1)]
    param_str = ', '.join(param_vec)
    pre_param_str = ', '.join(param_vec[:-1])
    return f"""#define GET_FUNC_BODY_{n}({param_str}) \\
    GET_FUNC_BODY_{n-1}({pre_param_str})    \\
    if constexpr ({n-1} == N) {{ return (_{n}); }} """

def generate_get_fun(n):
    param_vec = [f'_{i}' for i in range(1, n + 1)]
    param_str = ', '.join(param_vec)
    return f'''#define DEFINE_STRUCT_BUFFER_MEMBERS_{n}({param_str}) \\
    DEF_DATA_STUCT  \\
    GET_FUNC_HEAD() \\
    GET_FUNC_BODY_{n}({param_str})  \\
    GET_FUNC_TAIL({n-1})    \\
    GET_FUNC_HEAD_CONST()    \\
    GET_FUNC_BODY_{n}({param_str})  \\
    GET_FUNC_TAIL({n-1})'''

 
def generate_common():
    return """
/**
*   auto generated by scripts/macro_generator.py
*/
#pragma once
#include <string>
#include "utils/flag_classes.h"
#define GET_FUNC_HEAD()  \\
    template <size_t N>  \\
    decltype(auto) Get() \\
    {
#define GET_FUNC_HEAD_CONST()  \\
    template <size_t N>        \\
    decltype(auto) Get() const \\
    {

#define GET_FUNC_TAIL(max_index)                     \\
    if constexpr (max_index < N)                     \\
    {                                                \\
        return structbuf::flag_classes::MemberEnd{}; \\
    }                                                \\
    }"""

def generate_data_struct():
    return '''#define DEF_DATA_STUCT inline static structbuf::flag_classes::DataStructFlag data_struct_flag;'''


def generate_expand():
    return f'''#define STRUCT_BUFFER_EXPAND( x ) x'''

def generate_get_macro(n):
    param_vec = [f'_{i}' for i in range(1, n + 1)]
    param_str = ', '.join(param_vec)
    return f'''#define STRUCT_BUFFER_GET_MACRO({param_str}, NAME,...) NAME'''

def generate_common_members(n):
    param_vec = [f'DEFINE_STRUCT_BUFFER_MEMBERS_{i}' for i in range(n, 0, -1)]
    param_str = ', '.join(param_vec) 
    return f'''#define DEFINE_STRUCT_BUFFER_MEMBERS(...) STRUCT_BUFFER_EXPAND(STRUCT_BUFFER_GET_MACRO(__VA_ARGS__, {param_str})(__VA_ARGS__))'''




max_member_count = 64


print(generate_common())
print(generate_data_struct())
print(generate_expand())
print(generate_get_macro(max_member_count))
print(generate_common_members(max_member_count))


for i in range(1,max_member_count + 1):
    print(generate_get_func_body(i))
    print(generate_get_fun(i))